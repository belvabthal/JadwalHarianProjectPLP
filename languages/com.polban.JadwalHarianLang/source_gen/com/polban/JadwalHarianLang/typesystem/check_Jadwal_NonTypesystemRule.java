package com.polban.JadwalHarianLang.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_Jadwal_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_Jadwal_NonTypesystemRule() {
  }
  public void applyRule(final SNode jadwal, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    List<SNode> allKegiatans = SLinkOperations.getChildren(jadwal, LINKS.kegiatans$Ta9o);

    for (int i = 0; i < ListSequence.fromList(allKegiatans).count(); i++) {
      SNode kegiatanA = (SNode) allKegiatans.get(i);

      int a_mulai = SPropertyOperations.getInteger(SLinkOperations.getTarget(SLinkOperations.getTarget(kegiatanA, LINKS.waktu$cLTo), LINKS.waktuMulai$oURc), PROPS.Jam$gVFn) * 60 + SPropertyOperations.getInteger(SLinkOperations.getTarget(SLinkOperations.getTarget(kegiatanA, LINKS.waktu$cLTo), LINKS.waktuMulai$oURc), PROPS.Menit$gVUo);
      int a_selesai = SPropertyOperations.getInteger(SLinkOperations.getTarget(SLinkOperations.getTarget(kegiatanA, LINKS.waktu$cLTo), LINKS.waktuSelesai$oV6d), PROPS.Jam$gVFn) * 60 + SPropertyOperations.getInteger(SLinkOperations.getTarget(SLinkOperations.getTarget(kegiatanA, LINKS.waktu$cLTo), LINKS.waktuSelesai$oV6d), PROPS.Menit$gVUo);

      for (int j = i + 1; j < ListSequence.fromList(allKegiatans).count(); j++) {
        SNode kegiatanB = (SNode) allKegiatans.get(j);

        int b_mulai = SPropertyOperations.getInteger(SLinkOperations.getTarget(SLinkOperations.getTarget(kegiatanB, LINKS.waktu$cLTo), LINKS.waktuMulai$oURc), PROPS.Jam$gVFn) * 60 + SPropertyOperations.getInteger(SLinkOperations.getTarget(SLinkOperations.getTarget(kegiatanB, LINKS.waktu$cLTo), LINKS.waktuMulai$oURc), PROPS.Menit$gVUo);
        int b_selesai = SPropertyOperations.getInteger(SLinkOperations.getTarget(SLinkOperations.getTarget(kegiatanB, LINKS.waktu$cLTo), LINKS.waktuSelesai$oV6d), PROPS.Jam$gVFn) * 60 + SPropertyOperations.getInteger(SLinkOperations.getTarget(SLinkOperations.getTarget(kegiatanB, LINKS.waktu$cLTo), LINKS.waktuSelesai$oV6d), PROPS.Menit$gVUo);

        if (a_mulai < b_selesai && a_selesai > b_mulai) {
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(kegiatanA, "Jadwal tumpang tindih dengan " + SPropertyOperations.getString(kegiatanB, PROPS.name$cLEn), "r:ae86b6ad-eff2-4535-8c04-b4bce738b53e(com.polban.JadwalHarianLang.typesystem)", "7288077080417436764", null, errorTarget);
          }
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(kegiatanB, "Jadwal tumpang tindih dengan " + SPropertyOperations.getString(kegiatanA, PROPS.name$cLEn), "r:ae86b6ad-eff2-4535-8c04-b4bce738b53e(com.polban.JadwalHarianLang.typesystem)", "7288077080417445262", null, errorTarget);
          }
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Jadwal$Sf;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink kegiatans$Ta9o = MetaAdapterFactory.getContainmentLink(0xb20407ef9294e8eL, 0x8050ea856559a353L, 0x44f57300c50f6ddbL, 0x44f57300c50f6dddL, "kegiatans");
    /*package*/ static final SContainmentLink waktu$cLTo = MetaAdapterFactory.getContainmentLink(0xb20407ef9294e8eL, 0x8050ea856559a353L, 0x44f57300c50f6a97L, 0x44f57300c50f6a99L, "waktu");
    /*package*/ static final SContainmentLink waktuMulai$oURc = MetaAdapterFactory.getContainmentLink(0xb20407ef9294e8eL, 0x8050ea856559a353L, 0x44f57300c50f6a9cL, 0x6524737da1e6a2afL, "waktuMulai");
    /*package*/ static final SContainmentLink waktuSelesai$oV6d = MetaAdapterFactory.getContainmentLink(0xb20407ef9294e8eL, 0x8050ea856559a353L, 0x44f57300c50f6a9cL, 0x6524737da1e6a2b0L, "waktuSelesai");
  }

  private static final class PROPS {
    /*package*/ static final SProperty Menit$gVUo = MetaAdapterFactory.getProperty(0xb20407ef9294e8eL, 0x8050ea856559a353L, 0x6524737da1e5653eL, 0x6524737da1e56540L, "Menit");
    /*package*/ static final SProperty Jam$gVFn = MetaAdapterFactory.getProperty(0xb20407ef9294e8eL, 0x8050ea856559a353L, 0x6524737da1e5653eL, 0x6524737da1e5653fL, "Jam");
    /*package*/ static final SProperty name$cLEn = MetaAdapterFactory.getProperty(0xb20407ef9294e8eL, 0x8050ea856559a353L, 0x44f57300c50f6a97L, 0x44f57300c50f6a98L, "name");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Jadwal$Sf = MetaAdapterFactory.getConcept(0xb20407ef9294e8eL, 0x8050ea856559a353L, 0x44f57300c50f6ddbL, "com.polban.JadwalHarianLang.structure.Jadwal");
  }
}
